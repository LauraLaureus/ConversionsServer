// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;

namespace Chimerical.Conversions.Db.Migrations
{
    [DbContext(typeof(ConversionsContext))]
    [Migration("20181002023603_SeedDistanceAndAreaData")]
    partial class SeedDistanceAndAreaData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ConversionsDb.Models.Conversions.BaseUnitMap", b =>
                {
                    b.Property<int>("UnitTypeId");

                    b.Property<string>("BaseUnitSymbol")
                        .HasMaxLength(8);

                    b.HasKey("UnitTypeId");

                    b.HasIndex("BaseUnitSymbol");

                    b.ToTable("BaseUnitMap", "Conversions");

                    b.HasData(
                        new { UnitTypeId = 2, BaseUnitSymbol = "km²" },
                        new { UnitTypeId = 1, BaseUnitSymbol = "m" }
                    );
                });

            modelBuilder.Entity("ConversionsDb.Models.Conversions.Conversion", b =>
                {
                    b.Property<string>("FromUnitSymbol")
                        .HasMaxLength(8);

                    b.Property<string>("ToUnitSymbol")
                        .HasMaxLength(8);

                    b.Property<double>("Multiplier");

                    b.HasKey("FromUnitSymbol", "ToUnitSymbol");

                    b.HasIndex("ToUnitSymbol");

                    b.ToTable("Conversion", "Conversions");

                    b.HasData(
                        new { FromUnitSymbol = "km²", ToUnitSymbol = "ha", Multiplier = 100.0 },
                        new { FromUnitSymbol = "km²", ToUnitSymbol = "m²", Multiplier = 10000000.0 },
                        new { FromUnitSymbol = "mi²", ToUnitSymbol = "km²", Multiplier = 2.58999 },
                        new { FromUnitSymbol = "mi²", ToUnitSymbol = "ac", Multiplier = 640.0 },
                        new { FromUnitSymbol = "mi²", ToUnitSymbol = "yd²", Multiplier = 3097600.0 },
                        new { FromUnitSymbol = "mi²", ToUnitSymbol = "ft²", Multiplier = 27878400.0 },
                        new { FromUnitSymbol = "mi²", ToUnitSymbol = "in²", Multiplier = 4014489600.0 },
                        new { FromUnitSymbol = "km", ToUnitSymbol = "m", Multiplier = 1000.0 },
                        new { FromUnitSymbol = "m", ToUnitSymbol = "dm", Multiplier = 10.0 },
                        new { FromUnitSymbol = "m", ToUnitSymbol = "cm", Multiplier = 100.0 },
                        new { FromUnitSymbol = "m", ToUnitSymbol = "mm", Multiplier = 1000.0 },
                        new { FromUnitSymbol = "m", ToUnitSymbol = "μm", Multiplier = 1000000.0 },
                        new { FromUnitSymbol = "m", ToUnitSymbol = "nm", Multiplier = 1000000000.0 },
                        new { FromUnitSymbol = "ft", ToUnitSymbol = "m", Multiplier = 0.3048 },
                        new { FromUnitSymbol = "mi", ToUnitSymbol = "ft", Multiplier = 5280.0 },
                        new { FromUnitSymbol = "yd", ToUnitSymbol = "ft", Multiplier = 3.0 },
                        new { FromUnitSymbol = "ft", ToUnitSymbol = "in", Multiplier = 12.0 },
                        new { FromUnitSymbol = "nmi", ToUnitSymbol = "ft", Multiplier = 6076.12 }
                    );
                });

            modelBuilder.Entity("ConversionsDb.Models.Conversions.Unit", b =>
                {
                    b.Property<string>("Symbol")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Symbol");

                    b.ToTable("Unit", "Conversions");

                    b.HasData(
                        new { Symbol = "km²", DisplayName = "Square Kilometre" },
                        new { Symbol = "m²", DisplayName = "Square Metre" },
                        new { Symbol = "mi²", DisplayName = "Square Mile" },
                        new { Symbol = "yd²", DisplayName = "Square Yard" },
                        new { Symbol = "ft²", DisplayName = "Square Foot" },
                        new { Symbol = "in²", DisplayName = "Square Inch" },
                        new { Symbol = "ha", DisplayName = "Hectare" },
                        new { Symbol = "ac", DisplayName = "Acre" },
                        new { Symbol = "km", DisplayName = "Kilometre" },
                        new { Symbol = "m", DisplayName = "Metre" },
                        new { Symbol = "dm", DisplayName = "Decimetre" },
                        new { Symbol = "cm", DisplayName = "Centimetre" },
                        new { Symbol = "mm", DisplayName = "Millimetre" },
                        new { Symbol = "μm", DisplayName = "Micrometre" },
                        new { Symbol = "nm", DisplayName = "Nanometre" },
                        new { Symbol = "mi", DisplayName = "Mile" },
                        new { Symbol = "yd", DisplayName = "Yard" },
                        new { Symbol = "ft", DisplayName = "Foot" },
                        new { Symbol = "in", DisplayName = "Inch" },
                        new { Symbol = "nmi", DisplayName = "Nautical Mile" }
                    );
                });

            modelBuilder.Entity("ConversionsDb.Models.Conversions.UnitType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("UnitType", "Conversions");

                    b.HasData(
                        new { Id = 2, DisplayName = "Area" },
                        new { Id = 1, DisplayName = "Distance" }
                    );
                });

            modelBuilder.Entity("ConversionsDb.Models.Conversions.UnitTypeMap", b =>
                {
                    b.Property<int>("UnitTypeId");

                    b.Property<string>("UnitSymbol")
                        .HasMaxLength(8);

                    b.HasKey("UnitTypeId", "UnitSymbol");

                    b.HasAlternateKey("UnitSymbol", "UnitTypeId");

                    b.ToTable("UnitTypeMap", "Conversions");

                    b.HasData(
                        new { UnitTypeId = 1, UnitSymbol = "km" },
                        new { UnitTypeId = 1, UnitSymbol = "m" },
                        new { UnitTypeId = 1, UnitSymbol = "dm" },
                        new { UnitTypeId = 1, UnitSymbol = "cm" },
                        new { UnitTypeId = 1, UnitSymbol = "mm" },
                        new { UnitTypeId = 1, UnitSymbol = "μm" },
                        new { UnitTypeId = 1, UnitSymbol = "nm" },
                        new { UnitTypeId = 1, UnitSymbol = "mi" },
                        new { UnitTypeId = 1, UnitSymbol = "yd" },
                        new { UnitTypeId = 1, UnitSymbol = "ft" },
                        new { UnitTypeId = 1, UnitSymbol = "in" },
                        new { UnitTypeId = 1, UnitSymbol = "nmi" },
                        new { UnitTypeId = 2, UnitSymbol = "km²" },
                        new { UnitTypeId = 2, UnitSymbol = "m²" },
                        new { UnitTypeId = 2, UnitSymbol = "mi²" },
                        new { UnitTypeId = 2, UnitSymbol = "yd²" },
                        new { UnitTypeId = 2, UnitSymbol = "ft²" },
                        new { UnitTypeId = 2, UnitSymbol = "in²" },
                        new { UnitTypeId = 2, UnitSymbol = "ha" },
                        new { UnitTypeId = 2, UnitSymbol = "ac" }
                    );
                });

            modelBuilder.Entity("ConversionsDb.Models.Conversions.BaseUnitMap", b =>
                {
                    b.HasOne("ConversionsDb.Models.Conversions.Unit", "BaseUnit")
                        .WithMany()
                        .HasForeignKey("BaseUnitSymbol");

                    b.HasOne("ConversionsDb.Models.Conversions.UnitType", "UnitType")
                        .WithMany()
                        .HasForeignKey("UnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ConversionsDb.Models.Conversions.Conversion", b =>
                {
                    b.HasOne("ConversionsDb.Models.Conversions.Unit", "FromUnit")
                        .WithMany()
                        .HasForeignKey("FromUnitSymbol")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ConversionsDb.Models.Conversions.Unit", "ToUnit")
                        .WithMany()
                        .HasForeignKey("ToUnitSymbol")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ConversionsDb.Models.Conversions.UnitTypeMap", b =>
                {
                    b.HasOne("ConversionsDb.Models.Conversions.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitSymbol")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ConversionsDb.Models.Conversions.UnitType", "UnitType")
                        .WithMany()
                        .HasForeignKey("UnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
